---
owner_slack: "#govuk-developers"
title: Redirect a route
section: Routing
layout: manual_layout
parent: "/manual.html"
related_applications: [short-url-manager]
---

Sometimes, there is a need to manually redirect existing URLs to another
internal location, usually due to content being archived or because the
slug has been changed.

There is also a regular requirement for creating short URLs on behalf of
departments, usually for use with for campaign materials.

## Getting information on current redirects

To find if there is already a redirect for a particular path, open a router-api
console:

```console
$ gds govuk connect app-console -e production router_backend/router-api
```

Then search for the incoming path you are interested in:

```console
> Route.where(incoming_path: '/path-to-item')
```

Redirect routes have the handler `redirect`.

## Redirecting from the original publishing app

The preferred method of creating redirects is to use the publishing app that
originally published the content to unpublish it and redirect it to another
page using the Publishing API.

This ensures that the workflow and publishing history stays within the app
wherever possible.

## Using the Short URL Manager

If the redirect is from a URL that is not a currently-published content item,
you should first look to use the [Short URL Manager][short-url-manager] to
create a redirect request. Requests are checked and approved by content
designers, after which they are made live.

Redirects created in Short URL Manager are published via the Publishing API.

Specific Signon [permissions][short-url-manager-permissions] are required to
make and approve redirect requests through the Short URL Manager. Additionally,
there is a `advanced_options` permission which enables creating redirects for
pages that are already owned by other apps, creating `prefix` type redirects,
and using non-default values for the `segments_mode`.

[short-url-manager]: https://short-url-manager.publishing.service.gov.uk
[short-url-manager-permissions]: https://github.com/alphagov/short-url-manager/#permissions

### Removing a route created in the Short URL Manager

First find the `content_id` of the URL that needs to be removed. This can be found by using the Content Store API: `www.gov.uk/api/content/<path goes here>`.

For example, finding the `content_id` for the page about [keeping a pet pig or micropig](https://www.gov.uk/guidance/keeping-a-pet-pig-or-micropig) is found by going to [`www.gov.uk/api/content/guidance/keeping-a-pet-pig-or-micropig`](https://www.gov.uk/api/content/guidance/keeping-a-pet-pig-or-micropig). The `content_id` should be a UUID; for example: `602144f8-7631-11e4-a3cb-005056011aef`.

The content_id is with a rake task that removes the shortlink. The [Short URL Manager documentation](https://docs.publishing.service.gov.uk/apps/short-url-manager.html#run-a-rake-task) has handy links for running the rake tasks in the different environments.

The rake task for removing a redirect is:

```
redirect:destroy[<UUID goes here>]
```

<%= RunRakeTask.links("short-url-manager", "redirect:destroy[UUID goes here]") %>

For example:

```
redirect:destroy["123e4567-e89b-12d3-a456-426614174000"]
```

The redirect is now removed and will return a [410 Gone status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/410).

### Removing a route completely so it can be replaced with another route

Removing a route using the rake task in the previous section returns a 410 Gone status - this means that the URL can not be reused by another publication as the route is still being used.

To completely remove a route requires using the Rails console for several different apps using the [GDS CLI and GOV.UK Connect tools](https://docs.publishing.service.gov.uk/manual/get-started.html#3-install-gds-tooling).

To access an app's Rails console, the following command is used:

```bash
gds govuk connect app-console --environment <environment> <app name>
```

Replace `<environment>` with `integration`, `staging`, or `production`; and `<app name>` with the name of the app you want to access.

For example, accessing the console for the `publishing-api` app in `staging` would be:

```bash
gds govuk connect app-console --environment staging publishing-api
```

Removing the route, we need to know the slug that should be deleted. These examples use `/example-path`.

Delete the route in `router-api`:

```ruby
Route.where(incoming_path: "/example-path").delete
```

In `publishing-api`, delete the reservation that makes sure that the route can't be used by any other app:

```ruby
PathReservation.find_by(base_path: "/example-path").delete
```

In content-store _and_ the content-store-draft, remove the content item that used in inhabit the URL:

```ruby
ContentItem.find_by(base_path: "/example-path").delete
```

For documents published in Mainstream Publisher, update and republish the content that should now sit at `/example-path`.

(In Mainstream Publisher the edition id can be found at the end of the URL. For example, the edition found at publisher.publishing.service.gov.uk/editions/<mark>5fb53d8fd3bf7f626687198c</mark> has the edition id `5fb53d8fd3bf7f626687198c`.)

```ruby
edition = Edition.find("<edition id>")

UpdateWorker.perform_async(edition.id.to_s)

RepublishWorker.perform_async(edition.id.to_s)
```

For documents published in other publishing apps that are not Mainstream Publisher, the instructions will differ.

The final step is to [clear the cache for the routes](https://docs.publishing.service.gov.uk/manual/purge-cache.html).

## Fixing incorrect Corporate Information page redirects

There have been a few occasions where Corporate Information pages have
started redirecting the English version to a translation. Should this
happen, the redirects can be identified with:

```ruby
Route.where(incoming_path: /\/about/).each do |route|
  puts "#{route.id} #{route.incoming_path} -> #{route.redirect_to}" if route.handler == "redirect"
end
```

That will list the id and paths for each redirect. Redirects from the
English version to a translation, for example:

```
579a109cd068b406250014e4 /government/organisations/companies-house/about/access-and-opening -> /government/organisations/companies-house/about/access-and-opening.cy
```

...can be deleted with

```ruby
Route.find('579a109cd068b406250014e4').destroy
```

For the deleted routes to take effect, you need to reload the router.

```ruby
RouterReloader.reload
```

## Redirects for HMRC manuals

There are rake tasks for redirecting HMRC manuals and HMRC manual sections, which can be [found in the hmrc-manuals-api repo](https://github.com/alphagov/hmrc-manuals-api/tree/master/lib/tasks). These can be run via the `Run rake task` jenkins job.

[See example of redirecting a HMRC manual section to another section](https://deploy.integration.publishing.service.gov.uk/job/run-rake-task/parambuild/?TARGET_APPLICATION=hmrc-manuals-api&MACHINE_CLASS=backend&RAKE_TASK=redirect_hmrc_section[original-parent-manual-slug,original-section-slug,new-parent-manual-slug,new-section-slug])

## Redirects from campaign sites

The campaigns platform is a WordPress site managed by dxw. Redirects from a
`*.campaign.gov.uk` site require a support ticket. Currently, James Whitmarsh or
Kelvin Gan can raise a ticket.
